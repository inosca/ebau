# serializer version: 1
# name: test_document_merge_service_cover_sheet_with_header_values
  dict({
    'addressHeader': 'Bahnhofstrasse 2, Testhausen',
    'addressHeaderLabel': 'Adresse',
    'applicantHeader': 'Test AG, Foo Bar',
    'applicantHeaderLabel': 'Gesuchsteller/in',
    'applicants': list([
      dict({
        'address_1': '',
        'address_2': '',
        'first_name': 'Foo',
        'full_address': '',
        'full_name': 'Test AG, Foo Bar',
        'is_juristic_person': True,
        'juristic_name': 'Test AG',
        'last_name': 'Bar',
        'street': '',
        'street_number': '',
        'town': '',
        'zip': '',
      }),
    ]),
    'authorityHeader': 'Rebecca Gonzalez',
    'authorityHeaderLabel': 'Leitbehörde',
    'caseId': 1,
    'caseType': 'Baugesuch',
    'coordEast': '',
    'coordNorth': '',
    'createdAt': 'Erstellt am 03.08.2022 um 09:19',
    'descriptionHeader': 'Bau Einfamilienhaus',
    'descriptionHeaderLabel': 'Beschreibung',
    'dossierNr': '2021-99',
    'formType': None,
    'generatedAt': 'Generiert am 07.09.2022 um 14:01',
    'inputDateHeader': FakeDatetime(2021, 1, 1, 0, 0),
    'inputDateHeaderLabel': 'Eingangsdatum',
    'landownerHeaderLabel': 'Grundeigentümer/in',
    'landowners': list([
    ]),
    'modificationHeader': 'Anbau Haus',
    'modificationHeaderLabel': 'Projektänderung',
    'modifiedAt': 'Zuletzt bearbeitet am 06.09.2022 um 15:37',
    'municipality': 'Testhausen',
    'municipalityHeader': 'Testhausen',
    'municipalityHeaderLabel': 'Gemeinde',
    'paperInputDateHeader': FakeDatetime(2021, 1, 2, 0, 0),
    'plotsHeader': '123',
    'plotsHeaderLabel': 'Parzelle(n)',
    'projectAuthorHeaderLabel': 'Projektverfasser/in',
    'projectAuthors': list([
    ]),
    'responsibleHeader': 'testuser',
    'responsibleHeaderLabel': 'Zuständig',
    'signatureMetadata': 'Ort und Datum',
    'signatureSectionTitle': 'Unterschriften',
    'signatureTitle': 'Unterschrift',
    'tagHeader': 'some tag',
    'tagHeaderLabel': 'Stichworte',
    'uploadedAt': 'Hochgeladen am 07.09.2022 um 14:01',
  })
# ---
# name: test_document_merge_service_cover_sheet_without_header_values
  dict({
    'addressHeader': '',
    'addressHeaderLabel': 'Adresse',
    'applicantHeader': '',
    'applicantHeaderLabel': 'Gesuchsteller/in',
    'applicants': list([
    ]),
    'authorityHeader': None,
    'authorityHeaderLabel': 'Leitbehörde',
    'caseId': 1,
    'caseType': 'Baugesuch',
    'coordEast': '',
    'coordNorth': '',
    'createdAt': 'Erstellt am 06.09.2022 um 15:37',
    'descriptionHeader': None,
    'descriptionHeaderLabel': 'Beschreibung',
    'dossierNr': None,
    'formType': None,
    'generatedAt': 'Generiert am 06.09.2022 um 15:37',
    'inputDateHeader': FakeDatetime(2021, 1, 1, 0, 0),
    'inputDateHeaderLabel': 'Eingangsdatum',
    'landownerHeaderLabel': 'Grundeigentümer/in',
    'landowners': list([
    ]),
    'modificationHeader': None,
    'modificationHeaderLabel': 'Projektänderung',
    'modifiedAt': 'Zuletzt bearbeitet am 06.09.2022 um 15:37',
    'municipality': None,
    'municipalityHeader': None,
    'municipalityHeaderLabel': 'Gemeinde',
    'paperInputDateHeader': None,
    'plotsHeader': '',
    'plotsHeaderLabel': 'Parzelle(n)',
    'projectAuthorHeaderLabel': 'Projektverfasser/in',
    'projectAuthors': list([
    ]),
    'responsibleHeader': None,
    'responsibleHeaderLabel': 'Zuständig',
    'signatureMetadata': 'Ort und Datum',
    'signatureSectionTitle': 'Unterschriften',
    'signatureTitle': 'Unterschrift',
    'tagHeader': None,
    'tagHeaderLabel': 'Stichworte',
    'uploadedAt': 'Hochgeladen am 06.09.2022 um 15:37',
  })
# ---
# name: test_document_merge_service_snapshot
  dict({
    'addressHeader': 'Teststrasse 3, Burgdorf',
    'addressHeaderLabel': 'Adresse',
    'applicantHeader': 'Hans Meier',
    'applicantHeaderLabel': 'Gesuchsteller/in',
    'applicants': list([
      dict({
        'address_1': 'Strasse 33',
        'address_2': '3000 Bern',
        'first_name': 'Hans',
        'full_address': 'Strasse 33, 3000 Bern',
        'full_name': 'Hans Meier',
        'is_juristic_person': False,
        'juristic_name': '',
        'last_name': 'Meier',
        'street': 'Strasse',
        'street_number': '33',
        'town': 'Bern',
        'zip': 3000,
      }),
    ]),
    'authorityHeader': None,
    'authorityHeaderLabel': 'Leitbehörde',
    'caseId': 1,
    'caseType': 'Baugesuch',
    'coordEast': '2614314.0',
    'coordNorth': '1211926.0',
    'createdAt': 'Erstellt am 06.03.2020 um 12:10',
    'descriptionHeader': 'Testanfrage',
    'descriptionHeaderLabel': 'Beschreibung',
    'dossierNr': None,
    'formType': None,
    'generatedAt': 'Generiert am 06.01.2023 um 17:10',
    'inputDateHeader': None,
    'inputDateHeaderLabel': 'Eingangsdatum',
    'landownerHeaderLabel': 'Grundeigentümer/in',
    'landowners': list([
    ]),
    'modificationHeader': None,
    'modificationHeaderLabel': 'Projektänderung',
    'modifiedAt': 'Zuletzt bearbeitet am 05.08.2021 um 11:05',
    'municipality': 'Burgdorf',
    'municipalityHeader': 'Burgdorf',
    'municipalityHeaderLabel': 'Gemeinde',
    'paperInputDateHeader': None,
    'plotsHeader': '1',
    'plotsHeaderLabel': 'Parzelle(n)',
    'projectAuthorHeaderLabel': 'Projektverfasser/in',
    'projectAuthors': list([
    ]),
    'responsibleHeader': None,
    'responsibleHeaderLabel': 'Zuständig',
    'signatureMetadata': 'Ort und Datum',
    'signatureSectionTitle': 'Unterschriften',
    'signatureTitle': 'Unterschrift',
    'tagHeader': None,
    'tagHeaderLabel': 'Stichworte',
    'uploadedAt': 'Hochgeladen am 06.01.2023 um 17:10',
  })
# ---
# name: test_document_merge_service_snapshot.1
  list([
    dict({
      'children': list([
        dict({
          'children': list([
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Wurden Vorabklärungen durchgeführt?',
              'slug': 'wurden-vorabklaerungen-durchgefuehrt',
              'type': 'ChoiceQuestion',
            }),
          ]),
          'label': 'Durchgeführte Vorabklärungen',
          'slug': 'durchgefuehrte-vorabklaerungen',
          'type': 'FormQuestion',
        }),
        dict({
          'children': list([
            dict({
              'columns': list([
                'Handelt es sich um eine juristische Person?',
                'Name juristische Person',
                'Name',
                'Vorname',
                'Strasse',
                'Nummer',
                'PLZ',
                'Ort',
                'Telefon oder Mobile',
                'E-Mail',
                'Hinweis Gesuchsteller/in',
                'Vertreter/in?',
              ]),
              'label': 'Gesuchsteller/in',
              'rows': list([
                list([
                  dict({
                    'label': 'Handelt es sich um eine juristische Person?',
                    'slug': 'juristische-person-gesuchstellerin',
                    'type': 'TextQuestion',
                    'value': 'Nein',
                  }),
                  dict({
                    'label': 'Name',
                    'slug': 'name-gesuchstellerin',
                    'type': 'TextQuestion',
                    'value': 'Meier',
                  }),
                  dict({
                    'label': 'Vorname',
                    'slug': 'vorname-gesuchstellerin',
                    'type': 'TextQuestion',
                    'value': 'Hans',
                  }),
                  dict({
                    'label': 'Strasse',
                    'slug': 'strasse-gesuchstellerin',
                    'type': 'TextQuestion',
                    'value': 'Strasse',
                  }),
                  dict({
                    'label': 'Nummer',
                    'slug': 'nummer-gesuchstellerin',
                    'type': 'TextQuestion',
                    'value': '33',
                  }),
                  dict({
                    'label': 'PLZ',
                    'slug': 'plz-gesuchstellerin',
                    'type': 'IntegerQuestion',
                    'value': 3000,
                  }),
                  dict({
                    'label': 'Ort',
                    'slug': 'ort-gesuchstellerin',
                    'type': 'TextQuestion',
                    'value': 'Bern',
                  }),
                  dict({
                    'label': 'Telefon oder Mobile',
                    'slug': 'telefon-oder-mobile-gesuchstellerin',
                    'type': 'TextQuestion',
                    'value': '0999999999',
                  }),
                  dict({
                    'label': 'E-Mail',
                    'slug': 'e-mail-gesuchstellerin',
                    'type': 'TextQuestion',
                    'value': 'test@example.ch',
                  }),
                ]),
              ]),
              'slug': 'personalien-gesuchstellerin',
              'type': 'TableQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': True,
                  'label': 'Ja',
                }),
                dict({
                  'checked': False,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Ist die verantwortliche Person für die Selbstdeklaration Baukontrolle identisch mit dem/r Gesuchsteller/in?',
              'slug': 'verantwortliche-person-sb-identisch',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Vertreter/in mit Vollmacht',
                }),
                dict({
                  'checked': False,
                  'label': 'Projektverfasser/in',
                }),
                dict({
                  'checked': False,
                  'label': 'Grundeigentümer/in (falls nicht mit Gesuchsteller/in identisch)',
                }),
                dict({
                  'checked': False,
                  'label': 'Gebäudeeigentümer/in (falls nicht mit Gesuchsteller/in identisch)',
                }),
                dict({
                  'checked': False,
                  'label': 'Abweichende Rechnungsempfänger/in',
                }),
              ]),
              'label': 'Sind neben den Gesuchstellenden weitere Personen beteiligt?',
              'slug': 'weitere-personen',
              'type': 'MultipleChoiceQuestion',
            }),
          ]),
          'label': 'Personalien',
          'slug': 'personalien',
          'type': 'FormQuestion',
        }),
        dict({
          'children': list([
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Neubau',
                }),
                dict({
                  'checked': True,
                  'label': 'Um- / Ausbau',
                }),
                dict({
                  'checked': False,
                  'label': 'Umnutzung',
                }),
                dict({
                  'checked': False,
                  'label': 'Erweiterung / Anbau',
                }),
                dict({
                  'checked': False,
                  'label': 'Abbruch',
                }),
                dict({
                  'checked': False,
                  'label': 'Technische Anlage',
                }),
                dict({
                  'checked': False,
                  'label': 'Reklame',
                }),
                dict({
                  'checked': False,
                  'label': 'Tiefbauanlage',
                }),
                dict({
                  'checked': False,
                  'label': 'Andere',
                }),
              ]),
              'label': 'Baubeschrieb',
              'slug': 'baubeschrieb',
              'type': 'MultipleChoiceQuestion',
            }),
            dict({
              'label': 'Beschreibung',
              'slug': 'beschreibung-bauvorhaben',
              'type': 'TextareaQuestion',
              'value': 'Testanfrage',
            }),
            dict({
              'label': 'Bisherige Nutzung',
              'slug': 'bisherige-nutzung',
              'type': 'TextareaQuestion',
              'value': None,
            }),
            dict({
              'content': None,
              'label': 'Tragkonstruktion',
              'slug': 'tragkonstruktion',
              'type': 'StaticQuestion',
            }),
            dict({
              'label': 'System der Fundation',
              'slug': 'fundation-system',
              'type': 'TextQuestion',
              'value': None,
            }),
            dict({
              'label': 'Stützen',
              'slug': 'tragkonstruktion-stuetzen',
              'type': 'TextQuestion',
              'value': None,
            }),
            dict({
              'label': 'Wände',
              'slug': 'tragkonstruktion-waende',
              'type': 'TextQuestion',
              'value': None,
            }),
            dict({
              'label': 'Decken',
              'slug': 'tragkonstruktion-decken',
              'type': 'TextQuestion',
              'value': None,
            }),
            dict({
              'content': None,
              'label': 'Fassaden',
              'slug': 'fassaden',
              'type': 'StaticQuestion',
            }),
            dict({
              'label': 'Material',
              'slug': 'fassaden-material',
              'type': 'TextQuestion',
              'value': None,
            }),
            dict({
              'label': 'Farbe',
              'slug': 'fassaden-farbe',
              'type': 'TextQuestion',
              'value': None,
            }),
            dict({
              'content': None,
              'label': 'Dach',
              'slug': 'dach',
              'type': 'StaticQuestion',
            }),
            dict({
              'label': 'Form',
              'slug': 'dach-form',
              'type': 'TextQuestion',
              'value': None,
            }),
            dict({
              'label': 'Neigung',
              'slug': 'dach-neigung',
              'type': 'TextQuestion',
              'value': None,
            }),
            dict({
              'label': 'Material',
              'slug': 'dach-material',
              'type': 'TextQuestion',
              'value': None,
            }),
            dict({
              'label': 'Farbe',
              'slug': 'dach-farbe',
              'type': 'TextQuestion',
              'value': None,
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Rammen',
                }),
                dict({
                  'checked': False,
                  'label': 'Pfählen',
                }),
                dict({
                  'checked': False,
                  'label': 'Sprengen',
                }),
              ]),
              'label': 'Vorbereitende Sicherungsmassnahmen',
              'slug': 'vorbereitende-massnahmen',
              'type': 'MultipleChoiceQuestion',
            }),
            dict({
              'label': 'Baukosten in CHF',
              'slug': 'baukosten-in-chf',
              'type': 'IntegerQuestion',
              'value': 10000,
            }),
            dict({
              'label': 'Baukosten total, inkl. Erschliessung, ohne Landerwerb in CHF',
              'slug': 'baukosten-total-chf',
              'type': 'IntegerQuestion',
              'value': None,
            }),
            dict({
              'label': 'Gebäudevolumen GV nach SN 504 416 in m³',
              'slug': 'gebaeudevolumen',
              'type': 'FloatQuestion',
              'value': None,
            }),
            dict({
              'label': 'Baukosten total, inkl. Erschliessung, ohne Landerwerb pro m³ in CHF',
              'slug': 'baukosten-total-pro-m3',
              'type': 'CalculatedFloatQuestion',
            }),
            dict({
              'label': 'Geplanter Baustart',
              'slug': 'geplanter-baustart',
              'type': 'DateQuestion',
              'value': None,
            }),
            dict({
              'label': 'Dauer in Monaten',
              'slug': 'dauer-in-monaten',
              'type': 'IntegerQuestion',
              'value': None,
            }),
          ]),
          'label': 'Bauvorhaben',
          'slug': 'bauvorhaben',
          'type': 'FormQuestion',
        }),
      ]),
      'label': 'Allgemeine Informationen',
      'slug': '1-allgemeine-informationen',
      'type': 'FormQuestion',
    }),
    dict({
      'children': list([
        dict({
          'children': list([
            dict({
              'choices': list([
                dict({
                  'checked': True,
                  'label': 'Wohnen',
                }),
                dict({
                  'checked': False,
                  'label': 'Industrie',
                }),
                dict({
                  'checked': False,
                  'label': 'Gewerbe',
                }),
                dict({
                  'checked': False,
                  'label': 'Dienstleistung',
                }),
                dict({
                  'checked': False,
                  'label': 'Verkauf',
                }),
                dict({
                  'checked': False,
                  'label': 'Lager',
                }),
                dict({
                  'checked': False,
                  'label': 'Landwirtschaft',
                }),
                dict({
                  'checked': False,
                  'label': 'Gastgewerbe',
                }),
                dict({
                  'checked': False,
                  'label': 'Andere (z.B. Tiefbauanlage, Reklamevorhaben, Abbruchvorhaben ...)',
                }),
              ]),
              'label': 'Für welche Nutzungsart dient das Bauvorhaben?',
              'slug': 'nutzungsart',
              'type': 'MultipleChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'EFH',
                }),
                dict({
                  'checked': True,
                  'label': 'MFH',
                }),
              ]),
              'label': 'Um was für ein Gebäude handelt es sich?',
              'slug': 'um-was-fuer-ein-gebaeude-handelt-es-sich',
              'type': 'MultipleChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Öl- oder Gasfeuerungen mit einer Feuerungswärmeleistung ≥ 350 kW',
                }),
                dict({
                  'checked': False,
                  'label': 'Holzfeuerungen mit einer Feuerungswärmeleistung ≥ 70 kW',
                }),
                dict({
                  'checked': False,
                  'label': 'Pellet-, Späne- oder Schnitzelfeuerungsanlage',
                }),
              ]),
              'label': 'Umfasst das Vorhaben folgende Feuerungsanlagen?',
              'slug': 'feuerungsanlagen',
              'type': 'MultipleChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Handelt es sich um ein landwirtschaftliches Bauvorhaben mit Ableitung (Abwasser aus Wohn- und/oder Ökonomieanteil) in eine Güllegrube?',
              'slug': 'ableitung-in-guellegrube',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Sind Belange des Gewässerschutzes betroffen?',
              'slug': 'sind-belange-des-gewasserschutzes-betroffen',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Ist ein Schutzraum für das entsprechende Baugesuch Pflicht?',
              'slug': 'schutzraum-pflicht',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Handelt es sich um eine Anlage, in welcher mit gentechnisch veränderten oder pathogenen Organismen (Klasse 3 oder 4) Tätigkeiten durchgeführt werden?',
              'slug': 'gentechnisch-veraenderte-pathogene-organismen',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Befindet sich das Bauvorhaben im Wald / Wytweide oder innerhalb von 30 m Abstand zum Wald / Wytweide?',
              'slug': 'bau-im-wald-oder-innerhalb-von-30-m-abstand',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Gibt es bewilligungspflichtige Reklame?',
              'slug': 'gibt-es-bewilligungspflichtige-reklame',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Ist beim Bauvorhaben mit Bauabfällen zu rechnen (inklusive Boden)?',
              'slug': 'ist-mit-bauabfaellen-zu-rechnen',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Ist das Vorhaben energierelevant?',
              'slug': 'ist-das-vorhaben-energierelevant',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Naturgefahren: Handelt es sich um ein sensibles Objekt?',
              'slug': 'handelt-es-sich-um-ein-sensibles-objekt',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': False,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Ist durch das Bauvorhaben Boden betroffen?',
              'slug': 'ist-durch-das-bauvorhaben-boden-betroffen',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Solar- oder Photovoltaik-Anlage',
                }),
                dict({
                  'checked': False,
                  'label': 'Sendeanlage',
                }),
              ]),
              'label': 'Welche der folgenden Anlagen sind geplant?',
              'slug': 'geplante-anlagen',
              'type': 'MultipleChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Boden / Untergrund',
                }),
                dict({
                  'checked': False,
                  'label': 'Wasser',
                }),
                dict({
                  'checked': False,
                  'label': 'Luft',
                }),
              ]),
              'label': 'Welche Wärmepumpen sind im Bauvorhaben vorgesehen?',
              'slug': 'welche-waermepumpen',
              'type': 'MultipleChoiceQuestion',
            }),
          ]),
          'label': 'Triage',
          'slug': 'triage',
          'type': 'FormQuestion',
        }),
      ]),
      'label': 'Nutzung Bauvorhaben',
      'slug': '2-nutzung-bauvorhaben',
      'type': 'FormQuestion',
    }),
    dict({
      'children': list([
        dict({
          'children': list([
            dict({
              'label': 'Strasse/Flurname',
              'slug': 'strasse-flurname',
              'type': 'TextQuestion',
              'value': 'Teststrasse',
            }),
            dict({
              'label': 'Nr.',
              'slug': 'nr',
              'type': 'TextQuestion',
              'value': '3',
            }),
            dict({
              'label': 'Ort',
              'slug': 'ort-grundstueck',
              'type': 'TextQuestion',
              'value': 'Burgdorf',
            }),
            dict({
              'label': 'Zuständige Gemeinde',
              'slug': 'gemeinde',
              'type': 'TextQuestion',
              'value': 'Burgdorf',
            }),
            dict({
              'columns': list([
                'Parzellennummer',
                'Grundeigentümer/in',
                'Liegenschaftsnummer',
                'Baurecht-Nummer',
                'E-GRID-Nr.',
                'Strasse',
                'Nummer',
                'PLZ',
                'Ort',
                'Lagekoordinaten - Ost',
                'Lagekoordinaten - Nord',
              ]),
              'label': 'Parzelle',
              'rows': list([
                list([
                  dict({
                    'label': 'Parzellennummer',
                    'slug': 'parzellennummer',
                    'type': 'TextQuestion',
                    'value': '1',
                  }),
                  dict({
                    'label': 'Grundeigentümer/in',
                    'slug': 'grundeigentuemerin',
                    'type': 'TextQuestion',
                    'value': '',
                  }),
                  dict({
                    'label': 'Liegenschaftsnummer',
                    'slug': 'liegenschaftsnummer',
                    'type': 'IntegerQuestion',
                    'value': None,
                  }),
                  dict({
                    'label': 'Baurecht-Nummer',
                    'slug': 'baurecht-nummer',
                    'type': 'TextQuestion',
                    'value': None,
                  }),
                  dict({
                    'label': 'E-GRID-Nr.',
                    'slug': 'e-grid-nr',
                    'type': 'TextQuestion',
                    'value': 'CH273589324696',
                  }),
                  dict({
                    'label': 'Strasse',
                    'slug': 'strasse-parzelle',
                    'type': 'TextQuestion',
                    'value': None,
                  }),
                  dict({
                    'label': 'Nummer',
                    'slug': 'nummer-parzelle',
                    'type': 'TextQuestion',
                    'value': None,
                  }),
                  dict({
                    'label': 'PLZ',
                    'slug': 'plz-parzelle',
                    'type': 'IntegerQuestion',
                    'value': None,
                  }),
                  dict({
                    'label': 'Ort',
                    'slug': 'ort-parzelle',
                    'type': 'TextQuestion',
                    'value': None,
                  }),
                  dict({
                    'label': 'Lagekoordinaten - Ost',
                    'slug': 'lagekoordinaten-ost',
                    'type': 'FloatQuestion',
                    'value': 2614314.0,
                  }),
                  dict({
                    'label': 'Lagekoordinaten - Nord',
                    'slug': 'lagekoordinaten-nord',
                    'type': 'FloatQuestion',
                    'value': 1211926.0,
                  }),
                ]),
              ]),
              'slug': 'parzelle',
              'type': 'TableQuestion',
            }),
            dict({
              'label': 'BE-GID',
              'slug': 'be-gid',
              'type': 'TextQuestion',
              'value': None,
            }),
            dict({
              'label': 'GWR-EGID',
              'slug': 'gwr-egid',
              'type': 'IntegerQuestion',
              'value': None,
            }),
            dict({
              'label': 'Ausnützung',
              'slug': 'ausnuetzung',
              'type': 'TextQuestion',
              'value': None,
            }),
            dict({
              'label': 'Grünfläche in m²',
              'slug': 'gruenflache-in-quadratmeter',
              'type': 'TextQuestion',
              'value': None,
            }),
            dict({
              'label': 'Überbauung in %',
              'slug': 'ueberbauung-in-prozent',
              'type': 'TextQuestion',
              'value': None,
            }),
            dict({
              'label': 'Geschossfläche in m²',
              'slug': 'geschossflaeche-in-quadratmeter',
              'type': 'TextQuestion',
              'value': None,
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': False,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Rechtliche Sicherung fremden Bodens?',
              'slug': 'rechtliche-sicherung-fremden-bodens',
              'type': 'ChoiceQuestion',
            }),
          ]),
          'label': 'Allgemeine Angaben',
          'slug': 'allgemeine-angaben',
          'type': 'FormQuestion',
        }),
        dict({
          'children': list([
            dict({
              'label': 'Nutzungszone',
              'slug': 'nutzungszone',
              'type': 'TextQuestion',
              'value': 'Ensembleschutzzone ',
            }),
            dict({
              'label': 'Überbauungsordnung',
              'slug': 'ueberbauungsordnung',
              'type': 'TextQuestion',
              'value': None,
            }),
            dict({
              'label': 'Zulässige Geschosszahl',
              'slug': 'zulaessige-geschosszahl',
              'type': 'TextQuestion',
              'value': None,
            }),
            dict({
              'label': 'Empfindlichkeitsstufe (ES)',
              'slug': 'empfindlichkeitsstufe',
              'type': 'TextQuestion',
              'value': None,
            }),
            dict({
              'content': None,
              'label': 'Dimensionen des Baus',
              'slug': 'dimensionen-des-baus',
              'type': 'StaticQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Geringe Höhe bis 11 m',
                }),
                dict({
                  'checked': False,
                  'label': 'Mittlere Höhe zwischen 11 m und 30 m',
                }),
                dict({
                  'checked': False,
                  'label': 'Grosse Höhe ab 30 m',
                }),
              ]),
              'label': 'Höhe',
              'slug': 'hoehe',
              'type': 'MultipleChoiceQuestion',
            }),
            dict({
              'label': 'Effektive Geschosszahl',
              'slug': 'effektive-geschosszahl',
              'type': 'IntegerQuestion',
              'value': None,
            }),
          ]),
          'label': 'Zonenvorschriften - Baurechtliche Grundordnung',
          'slug': 'zonenvorschriften-baurechtliche-grundordnung',
          'type': 'FormQuestion',
        }),
        dict({
          'children': list([
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'S1',
                }),
                dict({
                  'checked': False,
                  'label': 'S2/Sh',
                }),
                dict({
                  'checked': False,
                  'label': 'S3/Sm',
                }),
              ]),
              'label': 'Grundwasserschutzzonen / -areale',
              'slug': 'grundwasserschutzzonen',
              'type': 'MultipleChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'üB',
                }),
                dict({
                  'checked': False,
                  'label': 'Aₒ',
                }),
                dict({
                  'checked': True,
                  'label': 'Aᵤ',
                }),
              ]),
              'label': 'Gewässerschutzbereich',
              'slug': 'gewaesserschutzbereich',
              'type': 'MultipleChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Belasteter Standort?',
              'slug': 'belasteter-standort',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Bauten (inkl. Pfähle) im Grundwasser oder Grundwasserabsenkung?',
              'slug': 'bauten-oder-pfaehlen-im-grundwasser',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': True,
                  'label': 'Ja',
                }),
                dict({
                  'checked': False,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Gebiet mit bekannten/unbekannten oder vermuteten Naturgefahren',
              'slug': 'gebiet-mit-naturgefahren',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': True,
                  'label': 'Ja',
                }),
                dict({
                  'checked': False,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Handelt es sich bei der Liegenschaft um ein Baudenkmal?',
              'slug': 'handelt-es-sich-um-ein-baudenkmal',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Schützenswert',
              'slug': 'schuetzenswert',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Erhaltenswert',
              'slug': 'erhaltenswert',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'K-Objekt',
              'slug': 'k-objekt',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Baugruppe Bauinventar',
              'slug': 'baugruppe-bauinventar',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'RRB',
              'slug': 'rrb',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Vertrag',
              'slug': 'vertrag',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Objekt des besonderen Landschaftsschutzes',
              'slug': 'objekt-des-besonderen-landschaftsschutzes',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Gebiet mit bekannten oder vermuteten archäologischen Objekten',
              'slug': 'gebiet-mit-archaeologischen-objekten',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Naturschutz',
              'slug': 'naturschutz',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Wildtierschutz',
              'slug': 'wildtierschutz',
              'type': 'ChoiceQuestion',
            }),
          ]),
          'label': 'Zonenvorschriften - Schutzzonen',
          'slug': 'zonenvorschriften-schutzzonen',
          'type': 'FormQuestion',
        }),
      ]),
      'label': 'Grundstück',
      'slug': '3-grundstueck',
      'type': 'FormQuestion',
    }),
    dict({
      'children': list([
        dict({
          'children': list([
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Ist das Bauvorhaben besonderen Brandrisiken ausgesetzt?',
              'slug': 'besondere-brandrisiken',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Werden Brandschutzabstände unterschritten?',
              'slug': 'werden-brandschutzabstaende-unterschritten',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': True,
                  'label': '1',
                }),
                dict({
                  'checked': False,
                  'label': '2',
                }),
                dict({
                  'checked': False,
                  'label': '3',
                }),
                dict({
                  'checked': False,
                  'label': '4',
                }),
              ]),
              'label': 'QSS-Stufe',
              'slug': 'qss-stufe',
              'type': 'MultipleChoiceQuestion',
            }),
          ]),
          'label': 'Brandschutz',
          'slug': 'brandschutz',
          'type': 'FormQuestion',
        }),
        dict({
          'children': list([
            dict({
              'content': None,
              'label': 'Wohnungen',
              'slug': 'wohnungen-titel',
              'type': 'StaticQuestion',
            }),
            dict({
              'columns': list([
                'Wohnungsgrösse (Anzahl Zimmer)',
                'Anzahl bestehender Wohnungen dieser Grösse',
                'Anzahl neuer Wohnungen dieser Grösse',
              ]),
              'label': 'Wohnungskategorie',
              'rows': list([
              ]),
              'slug': 'wohnungen',
              'type': 'TableQuestion',
            }),
            dict({
              'content': None,
              'label': 'Total',
              'slug': 'total-wohnungen-titel',
              'type': 'StaticQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Autoabstellplätze für Fahrzeuge oder Fahrradabstellplätze?',
              'slug': 'auto-oder-fahrradabstellplaetze',
              'type': 'ChoiceQuestion',
            }),
          ]),
          'label': 'Wohnen',
          'slug': 'wohnen',
          'type': 'FormQuestion',
        }),
      ]),
      'label': 'Bauwerk',
      'slug': '4-bauwerk',
      'type': 'FormQuestion',
    }),
    dict({
      'children': list([
        dict({
          'children': list([
            dict({
              'content': None,
              'label': 'Immissionsschutz - Bauen im lärmbelasteten Gebiet',
              'slug': 'immissionsschutz-laermbelastetes-gebiet-titel',
              'type': 'StaticQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Werden die Planungs- oder Immissionsgrenzwerte der massgebenden Empfindlichkeitsstufe auf der bebaubaren Fläche überschritten?',
              'slug': 'grenzwerte-ueberschritten',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'content': None,
              'label': 'Immissionsschutz - Allgemeine Angaben',
              'slug': 'immissionsschutz-allgemeine-angaben-titel',
              'type': 'StaticQuestion',
            }),
            dict({
              'label': 'Seit welchem Jahr besteht der Betrieb an diesem Standort?',
              'slug': 'seit-welchem-jahr-besteht-der-betrieb-am-standort',
              'type': 'IntegerQuestion',
              'value': None,
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Beinhaltet das Vorhaben Neubauten, Umbauten, Erweiterungen oder Umnutzungen, welche mit Schadstoffen oder Gerüchen belastete Luft aus Gebäuden oder Anlagen emittiert?',
              'slug': 'mit-schadstoffen-belastete-luft-aus-gebaeuden',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Beinhaltet das Vorhaben Neubauten, Umbauten, Erweiterungen oder Umnutzungen mit Anlagen oder Prozessen, welche Aussenlärm erzeugen?',
              'slug': 'wird-aussenlaerm-erzeugt',
              'type': 'ChoiceQuestion',
            }),
            dict({
              'content': None,
              'label': 'Immissionsschutz - Luftreinhaltung',
              'slug': 'immissionsschutz-luftreinhaltung-titel',
              'type': 'StaticQuestion',
            }),
            dict({
              'choices': list([
                dict({
                  'checked': False,
                  'label': 'Ja',
                }),
                dict({
                  'checked': True,
                  'label': 'Nein',
                }),
              ]),
              'label': 'Werden Luftemissionen erzeugt?',
              'slug': 'werden-luftemissionen-erzeugt',
              'type': 'ChoiceQuestion',
            }),
          ]),
          'label': 'Immissionsschutz I',
          'slug': 'immissionsschutz',
          'type': 'FormQuestion',
        }),
        dict({
          'children': list([
            dict({
              'choices': list([
                dict({
                  'checked': True,
                  'label': 'Unbestimmt',
                }),
                dict({
                  'checked': False,
                  'label': 'Rot',
                }),
                dict({
                  'checked': False,
                  'label': 'Blau',
                }),
                dict({
                  'checked': False,
                  'label': 'Gelb',
                }),
                dict({
                  'checked': False,
                  'label': 'Gelb-Weiss',
                }),
              ]),
              'label': 'Gefahrenstufe',
              'slug': 'gefahrenstufe',
              'type': 'MultipleChoiceQuestion',
            }),
            dict({
              'columns': list([
                'Hauptprozessart',
                'Prozessart',
                'Beschreibung der Gefährdung',
              ]),
              'label': 'Beschreibung der Prozessart',
              'rows': list([
              ]),
              'slug': 'beschreibung-der-prozessart-tabelle',
              'type': 'TableQuestion',
            }),
          ]),
          'label': 'Naturgefahren',
          'slug': 'naturgefahren',
          'type': 'FormQuestion',
        }),
        dict({
          'children': list([
            dict({
              'label': 'Gebäudeversicherungswert vor der Erneuerung in CHF',
              'slug': 'gebaeudeversicherungswert-in-chf',
              'type': 'IntegerQuestion',
              'value': 10000,
            }),
          ]),
          'label': 'Hindernisfreies Bauen',
          'slug': 'hindernisfreies-bauen',
          'type': 'FormQuestion',
        }),
      ]),
      'label': 'Spezialformulare',
      'slug': '5-spezialformulare',
      'type': 'FormQuestion',
    }),
    dict({
      'children': list([
        dict({
          'choices': list([
            dict({
              'checked': True,
              'label': 'Grundriss (Massstäblich (1:100 / 1:50) mit Angabe der Bodenfläche)',
            }),
          ]),
          'label': 'Grundriss (Massstäblich (1:100 / 1:50) mit Angabe der Bodenfläche)',
          'slug': 'grundriss-angabe-bodenflaeche-dokument',
          'type': 'MultipleChoiceQuestion',
        }),
        dict({
          'choices': list([
            dict({
              'checked': True,
              'label': 'Situationsplan',
            }),
          ]),
          'label': 'Situationsplan',
          'slug': 'situationsplan-dokument',
          'type': 'MultipleChoiceQuestion',
        }),
        dict({
          'choices': list([
            dict({
              'checked': True,
              'label': 'Grundriss',
            }),
          ]),
          'label': 'Grundriss',
          'slug': 'grundriss-dokument',
          'type': 'MultipleChoiceQuestion',
        }),
        dict({
          'choices': list([
            dict({
              'checked': True,
              'label': 'Schnitt',
            }),
          ]),
          'label': 'Schnitt',
          'slug': 'schnitt-dokument',
          'type': 'MultipleChoiceQuestion',
        }),
      ]),
      'label': 'Dokumente',
      'slug': '6-dokumente',
      'type': 'FormQuestion',
    }),
    dict({
      'children': list([
        dict({
          'choices': list([
            dict({
              'checked': True,
              'label': 'Die Anforderungen sind gemäss Art. 11 – 15 BewD eingehalten.',
            }),
          ]),
          'label': 'Die Anforderungen sind gemäss Art. 11 – 15 BewD eingehalten.',
          'slug': 'anforderungen-eingehalten',
          'type': 'MultipleChoiceQuestion',
        }),
        dict({
          'choices': list([
            dict({
              'checked': True,
              'label': 'Die Bauherrschaft bestätigt, dass die erforderlichen Massnahmen zum Schutz vor erhöhten Radongaskonzentrationen nach den anerkannten Regeln der Baukunde getroffen werden (siehe "Mehr Informationen"). Die Bauherrschaft hat zur Kenntnis genommen, dass die Bauabnahme grundsätzlich auch eine Radonmessung umfassen kann.',
            }),
          ]),
          'label': 'Die Bauherrschaft bestätigt, dass die erforderlichen Massnahmen zum Schutz vor erhöhten Radongaskonzentrationen nach den anerkannten Regeln der Baukunde getroffen werden (siehe "Mehr Informationen"). Die Bauherrschaft hat zur Kenntnis genommen, dass die Bauabnahme grundsätzlich auch eine Radonmessung umfassen kann.',
          'slug': 'einhaltung-radonvorgaben',
          'type': 'MultipleChoiceQuestion',
        }),
        dict({
          'choices': list([
            dict({
              'checked': True,
              'label': 'Die Bauherrschaft bestätigt, dass sie die Ausführungen zu den Asbestfragen (siehe "Mehr Informationen") zur Kenntnis genommen hat. Bei der Umsetzung des Bauvorhabens wird die Bauherrschaft ein Augenmerk auf mögliche asbesthaltige Materialien richten. Sollte ein Asbestverdacht vorhanden sein, verpflichtet sich die Bauherrschaft, das fragliche Material auf Asbest untersuchen zu lassen. Wenn sich dieses Material als astbesthaltig erweist, muss die Bauherrschaft dafür besorgt sein, dass dieses von einer Spezialfirma fachgerecht entsorgt wird (zu Lasten Auftraggeber).',
            }),
          ]),
          'label': 'Die Bauherrschaft bestätigt, dass sie die Ausführungen zu den Asbestfragen (siehe "Mehr Informationen") zur Kenntnis genommen hat. Bei der Umsetzung des Bauvorhabens wird die Bauherrschaft ein Augenmerk auf mögliche asbesthaltige Materialien richten. Sollte ein Asbestverdacht vorhanden sein, verpflichtet sich die Bauherrschaft, das fragliche Material auf Asbest untersuchen zu lassen. Wenn sich dieses Material als astbesthaltig erweist, muss die Bauherrschaft dafür besorgt sein, dass dieses von einer Spezialfirma fachgerecht entsorgt wird (zu Lasten Auftraggeber).',
          'slug': 'einhaltung-asbestvorgaben',
          'type': 'MultipleChoiceQuestion',
        }),
        dict({
          'choices': list([
            dict({
              'checked': True,
              'label': 'Der/die Gesuchsteller/in bestätigt, dass die Liegenschaftsentwässerung gemäss dem AWA-Merkblatt "Entwässerung von Industrie- und Gewerbeliegenschaften" geplant und realisiert werden. Als Beilage enthält das Gesuch einen Umgebungsplan, auf dem bei allen Teilfächen die vorgesehene Nutzung, die Befestigungsart, das Gefälle sowie die Entwässerungsart eingetragen sind.',
            }),
          ]),
          'label': 'Der/die Gesuchsteller/in bestätigt, dass die Liegenschaftsentwässerung gemäss dem AWA-Merkblatt "Entwässerung von Industrie- und Gewerbeliegenschaften" geplant und realisiert werden. Als Beilage enthält das Gesuch einen Umgebungsplan, auf dem bei allen Teilflächen die vorgesehene Nutzung, die Befestigungsart, das Gefälle sowie die Entwässerungsart eingetragen sind.',
          'slug': 'bestaetigung-liegenschaftsentwaesserung',
          'type': 'MultipleChoiceQuestion',
        }),
        dict({
          'choices': list([
            dict({
              'checked': True,
              'label': 'Der/die Gesuchsteller/in bestätigt, dass er keinen Tatbestand zu den Bestimmungen zum Natur-, Wild- und Vogelschutz tangiert.',
            }),
          ]),
          'label': 'Der/die Gesuchsteller/in bestätigt, dass er keinen Tatbestand zu den Bestimmungen zum Natur-, Wild- und Vogelschutz tangiert.',
          'slug': 'keine-tangierung-natur-wild-vogelschutz',
          'type': 'MultipleChoiceQuestion',
        }),
        dict({
          'choices': list([
            dict({
              'checked': True,
              'label': 'Der/die Gesuchsteller/in resp. die bevollmächtigte Vertretung bestätigt mit rechtsgültiger Unterschrift, dass die elektronisch übermittelten Daten (inkl. dem unterzeichneten Situationsplan) vollständig und wahrheitsgetreu ausgefüllt und eingereicht worden sind.',
            }),
          ]),
          'label': 'Der/die Gesuchsteller/in resp. die bevollmächtigte Vertretung bestätigt mit rechtsgültiger Unterschrift, dass die elektronisch übermittelten Daten (inkl. dem unterzeichneten Situationsplan) vollständig und wahrheitsgetreu ausgefüllt und eingereicht worden sind.',
          'slug': 'bestaetigung-mit-unterschrift',
          'type': 'MultipleChoiceQuestion',
        }),
        dict({
          'choices': list([
            dict({
              'checked': True,
              'label': 'Der/die Gesuchsteller/in bestätigt, dass die vom GIS-System übernommen Daten mit den baurechtlichen Grundlagen übereinstimmen.',
            }),
          ]),
          'label': 'Der/die Gesuchsteller/in bestätigt, dass die vom GIS-System übernommen Daten mit den baurechtlichen Grundlagen übereinstimmen.',
          'slug': 'bestaetigung-gis',
          'type': 'MultipleChoiceQuestion',
        }),
        dict({
          'choices': list([
            dict({
              'checked': True,
              'label': 'Die gesuchstellende Person bestätigt, dass sie die Berechtigung auf das eBau Dossier hat.  Sofern das Baugesuch nicht durch die gesuchstellende Person selbst, sondern durch eine Drittperson (z.B. Vertretung, Architekt(in), Projektverfasser(in) etc.) in eBau erfasst wurde, bestätigt diese Drittperson, welche das Baugesuch ausgefüllt hat, dass sie der gesuchstellenden Person bzw. der Bauherrschaft die Berechtigung (via Tab «Berechtigungen») auf das eBau Dossier erteilt hat.',
            }),
          ]),
          'label': 'Die gesuchstellende Person bestätigt, dass sie die Berechtigung auf das eBau Dossier hat.  Sofern das Baugesuch nicht durch die gesuchstellende Person selbst, sondern durch eine Drittperson (z.B. Vertretung, Architekt(in), Projektverfasser(in) etc.) in eBau erfasst wurde, bestätigt diese Drittperson, welche das Baugesuch ausgefüllt hat, dass sie der gesuchstellenden Person bzw. der Bauherrschaft die Berechtigung (via Tab «Berechtigungen») auf das eBau Dossier erteilt hat.',
          'slug': 'bestaetigung-berechtigung-bauherrschaft',
          'type': 'MultipleChoiceQuestion',
        }),
      ]),
      'label': 'Bestätigung',
      'slug': '7-bestaetigung',
      'type': 'FormQuestion',
    }),
    dict({
      'children': list([
        dict({
          'label': 'Ausnahmegesuche',
          'slug': 'ausnahmegesuche',
          'type': 'TextareaQuestion',
          'value': None,
        }),
        dict({
          'label': 'Bemerkungen',
          'slug': 'freigabequittung-bemerkungen',
          'type': 'TextareaQuestion',
          'value': None,
        }),
      ]),
      'label': 'Einreichen',
      'slug': '8-freigabequittung',
      'type': 'FormQuestion',
    }),
    dict({
      'children': list([
        dict({
          'label': 'Gesuchsteller/in',
          'people': list([
            dict({
              'familyName': 'Meier',
              'givenName': 'Hans',
            }),
          ]),
          'type': 'SignatureQuestion',
        }),
      ]),
      'label': 'Unterschriften',
      'slug': '8-unterschriften',
      'type': 'FormQuestion',
    }),
  ])
# ---
# name: test_document_merge_service_snapshot.2
  dict({
    'addressHeader': 'Wiesenweg, Burgdorf',
    'addressHeaderLabel': 'Adresse',
    'applicantHeader': 'Max Muster',
    'applicantHeaderLabel': 'Gesuchsteller/in',
    'applicants': list([
      dict({
        'address_1': 'Wiesenweg 33',
        'address_2': '3007 Bern',
        'first_name': 'Max',
        'full_address': 'Wiesenweg 33, 3007 Bern',
        'full_name': 'Max Muster',
        'is_juristic_person': False,
        'juristic_name': '',
        'last_name': 'Muster',
        'street': 'Wiesenweg',
        'street_number': '33',
        'town': 'Bern',
        'zip': 3007,
      }),
    ]),
    'authorityHeader': None,
    'authorityHeaderLabel': 'Leitbehörde',
    'caseId': 3,
    'caseType': 'Baugesuch',
    'coordEast': '2614296.0',
    'coordNorth': '1211900.0',
    'createdAt': 'Erstellt am 06.04.2021 um 14:19',
    'descriptionHeader': 'Neubad',
    'descriptionHeaderLabel': 'Beschreibung',
    'dossierNr': '2021-1',
    'formType': 'Selbstdeklaration Baukontrolle 1',
    'generatedAt': 'Generiert am 06.01.2023 um 17:10',
    'inputDateHeader': FakeDatetime(2021, 3, 31, 13, 17, 8, tzinfo=tzutc()),
    'inputDateHeaderLabel': 'Eingangsdatum',
    'landownerHeaderLabel': 'Grundeigentümer/in',
    'landowners': list([
    ]),
    'modificationHeader': None,
    'modificationHeaderLabel': 'Projektänderung',
    'modifiedAt': 'Zuletzt bearbeitet am 06.04.2021 um 14:22',
    'municipality': 'Burgdorf',
    'municipalityHeader': 'Burgdorf',
    'municipalityHeaderLabel': 'Gemeinde',
    'paperInputDateHeader': None,
    'plotsHeader': '3',
    'plotsHeaderLabel': 'Parzelle(n)',
    'projectAuthorHeaderLabel': 'Projektverfasser/in',
    'projectAuthors': list([
    ]),
    'responsibleHeader': None,
    'responsibleHeaderLabel': 'Zuständig',
    'signatureMetadata': 'Ort und Datum',
    'signatureSectionTitle': 'Unterschriften',
    'signatureTitle': 'Unterschrift',
    'tagHeader': None,
    'tagHeaderLabel': 'Stichworte',
    'uploadedAt': 'Hochgeladen am 06.01.2023 um 17:10',
  })
# ---
# name: test_document_merge_service_snapshot.3
  list([
    dict({
      'children': list([
        dict({
          'columns': list([
            'Handelt es sich um eine juristische Person?',
            'Name juristische Person',
            'Name',
            'Vorname',
            'Strasse',
            'Nummer',
            'PLZ',
            'Ort',
            'Telefon oder Mobile',
            'E-Mail',
            'Hinweis Gesuchsteller/in',
            'Vertreter/in?',
          ]),
          'label': 'Verantwortliche Person Selbstdeklaration Baukontrolle',
          'rows': list([
            list([
              dict({
                'label': 'Handelt es sich um eine juristische Person?',
                'slug': 'juristische-person-gesuchstellerin',
                'type': 'TextQuestion',
                'value': 'Nein',
              }),
              dict({
                'label': 'Name juristische Person',
                'slug': 'name-juristische-person-gesuchstellerin',
                'type': 'TextQuestion',
                'value': None,
              }),
              dict({
                'label': 'Name',
                'slug': 'name-gesuchstellerin',
                'type': 'TextQuestion',
                'value': 'Muster',
              }),
              dict({
                'label': 'Vorname',
                'slug': 'vorname-gesuchstellerin',
                'type': 'TextQuestion',
                'value': 'Max',
              }),
              dict({
                'label': 'Strasse',
                'slug': 'strasse-gesuchstellerin',
                'type': 'TextQuestion',
                'value': 'Wiesenweg',
              }),
              dict({
                'label': 'Nummer',
                'slug': 'nummer-gesuchstellerin',
                'type': 'TextQuestion',
                'value': '33',
              }),
              dict({
                'label': 'PLZ',
                'slug': 'plz-gesuchstellerin',
                'type': 'IntegerQuestion',
                'value': 3007,
              }),
              dict({
                'label': 'Ort',
                'slug': 'ort-gesuchstellerin',
                'type': 'TextQuestion',
                'value': 'Bern',
              }),
              dict({
                'label': 'Telefon oder Mobile',
                'slug': 'telefon-oder-mobile-gesuchstellerin',
                'type': 'TextQuestion',
                'value': '077777777',
              }),
              dict({
                'label': 'E-Mail',
                'slug': 'e-mail-gesuchstellerin',
                'type': 'TextQuestion',
                'value': 'info@example.com',
              }),
            ]),
            list([
              dict({
                'label': 'Handelt es sich um eine juristische Person?',
                'slug': 'juristische-person-gesuchstellerin',
                'type': 'TextQuestion',
                'value': 'Ja',
              }),
              dict({
                'label': 'Name juristische Person',
                'slug': 'name-juristische-person-gesuchstellerin',
                'type': 'TextQuestion',
                'value': 'Architekturbüro Asdf',
              }),
              dict({
                'label': 'Name',
                'slug': 'name-gesuchstellerin',
                'type': 'TextQuestion',
                'value': 'Egger',
              }),
              dict({
                'label': 'Vorname',
                'slug': 'vorname-gesuchstellerin',
                'type': 'TextQuestion',
                'value': 'Ernst',
              }),
              dict({
                'label': 'Strasse',
                'slug': 'strasse-gesuchstellerin',
                'type': 'TextQuestion',
                'value': 'Eggistrasse',
              }),
              dict({
                'label': 'Nummer',
                'slug': 'nummer-gesuchstellerin',
                'type': 'TextQuestion',
                'value': None,
              }),
              dict({
                'label': 'PLZ',
                'slug': 'plz-gesuchstellerin',
                'type': 'IntegerQuestion',
                'value': 3456,
              }),
              dict({
                'label': 'Ort',
                'slug': 'ort-gesuchstellerin',
                'type': 'TextQuestion',
                'value': 'Ebersecken',
              }),
              dict({
                'label': 'Telefon oder Mobile',
                'slug': 'telefon-oder-mobile-gesuchstellerin',
                'type': 'TextQuestion',
                'value': '01010101',
              }),
              dict({
                'label': 'E-Mail',
                'slug': 'e-mail-gesuchstellerin',
                'type': 'TextQuestion',
                'value': 'i@e.org',
              }),
            ]),
          ]),
          'slug': 'personalien-sb1-sb2',
          'type': 'TableQuestion',
        }),
        dict({
          'choices': list([
            dict({
              'checked': True,
              'label': 'Ja',
            }),
            dict({
              'checked': False,
              'label': 'Nein',
            }),
          ]),
          'label': 'Sind die Bedingungen und Auflagen der Baubewilligung (vor Baubeginn) erfüllt?',
          'slug': 'bedingungen-und-auflagen-erfuellt',
          'type': 'ChoiceQuestion',
        }),
        dict({
          'choices': list([
            dict({
              'checked': True,
              'label': 'Ja',
            }),
            dict({
              'checked': False,
              'label': 'Nein',
            }),
          ]),
          'label': 'Ist eine Schnurgerüstabnahme erforderlich?',
          'slug': 'ist-eine-schnurgerustabnahme-erforderlich',
          'type': 'ChoiceQuestion',
        }),
        dict({
          'choices': list([
            dict({
              'checked': True,
              'label': 'Ja',
            }),
            dict({
              'checked': False,
              'label': 'Nein',
            }),
          ]),
          'label': 'Sind Schnurgerüst und die bewilligte Höhe zur Abnahme bereit?',
          'slug': 'schnurgeruest-zur-abnahme-bereit',
          'type': 'ChoiceQuestion',
        }),
        dict({
          'label': 'Ab wann ist eine Kontrolle möglich?',
          'slug': 'ab-wann-ist-eine-kontrolle-moeglich',
          'type': 'DateQuestion',
          'value': datetime.date(2021, 4, 7),
        }),
      ]),
      'label': 'Selbstdeklaration',
      'slug': 'selbstdeklaration-sb1',
      'type': 'FormQuestion',
    }),
    dict({
      'children': list([
        dict({
          'label': 'Bemerkungen',
          'slug': 'bemerkungen-sb1',
          'type': 'TextareaQuestion',
          'value': None,
        }),
        dict({
          'content': None,
          'label': '',
          'slug': 'freigabequittung-druckansicht',
          'type': 'StaticQuestion',
        }),
      ]),
      'label': 'Freigabequittung',
      'slug': 'freigabequittung-sb1',
      'type': 'FormQuestion',
    }),
    dict({
      'children': list([
        dict({
          'label': 'Verantwortliche Person Selbstdeklaration Baukontrolle',
          'people': list([
            dict({
              'familyName': 'Muster',
              'givenName': 'Max',
              'juristicName': None,
            }),
            dict({
              'familyName': 'Egger',
              'givenName': 'Ernst',
              'juristicName': 'Architekturbüro Asdf',
            }),
          ]),
          'type': 'SignatureQuestion',
        }),
      ]),
      'label': 'Unterschriften',
      'slug': '8-unterschriften',
      'type': 'FormQuestion',
    }),
  ])
# ---
# name: test_document_merge_service_snapshot.4
  dict({
    'addressHeader': 'Wiesenweg, Burgdorf',
    'addressHeaderLabel': 'Adresse',
    'applicantHeader': 'Max Muster',
    'applicantHeaderLabel': 'Gesuchsteller/in',
    'applicants': list([
      dict({
        'address_1': 'Wiesenweg 33',
        'address_2': '3007 Bern',
        'first_name': 'Max',
        'full_address': 'Wiesenweg 33, 3007 Bern',
        'full_name': 'Max Muster',
        'is_juristic_person': False,
        'juristic_name': '',
        'last_name': 'Muster',
        'street': 'Wiesenweg',
        'street_number': '33',
        'town': 'Bern',
        'zip': 3007,
      }),
    ]),
    'authorityHeader': None,
    'authorityHeaderLabel': 'Leitbehörde',
    'caseId': 3,
    'caseType': 'Baugesuch',
    'coordEast': '2614296.0',
    'coordNorth': '1211900.0',
    'createdAt': 'Erstellt am 06.04.2021 um 14:23',
    'descriptionHeader': 'Neubad',
    'descriptionHeaderLabel': 'Beschreibung',
    'dossierNr': '2021-1',
    'formType': 'Selbstdeklaration Baukontrolle 2',
    'generatedAt': 'Generiert am 06.01.2023 um 17:10',
    'inputDateHeader': FakeDatetime(2021, 3, 31, 13, 17, 8, tzinfo=tzutc()),
    'inputDateHeaderLabel': 'Eingangsdatum',
    'landownerHeaderLabel': 'Grundeigentümer/in',
    'landowners': list([
    ]),
    'modificationHeader': None,
    'modificationHeaderLabel': 'Projektänderung',
    'modifiedAt': 'Zuletzt bearbeitet am 06.04.2021 um 14:23',
    'municipality': 'Burgdorf',
    'municipalityHeader': 'Burgdorf',
    'municipalityHeaderLabel': 'Gemeinde',
    'paperInputDateHeader': None,
    'plotsHeader': '3',
    'plotsHeaderLabel': 'Parzelle(n)',
    'projectAuthorHeaderLabel': 'Projektverfasser/in',
    'projectAuthors': list([
    ]),
    'responsibleHeader': None,
    'responsibleHeaderLabel': 'Zuständig',
    'signatureMetadata': 'Ort und Datum',
    'signatureSectionTitle': 'Unterschriften',
    'signatureTitle': 'Unterschrift',
    'tagHeader': None,
    'tagHeaderLabel': 'Stichworte',
    'uploadedAt': 'Hochgeladen am 06.01.2023 um 17:10',
  })
# ---
# name: test_document_merge_service_snapshot.5
  list([
    dict({
      'children': list([
        dict({
          'columns': list([
            'Handelt es sich um eine juristische Person?',
            'Name juristische Person',
            'Name',
            'Vorname',
            'Strasse',
            'Nummer',
            'PLZ',
            'Ort',
            'Telefon oder Mobile',
            'E-Mail',
            'Hinweis Gesuchsteller/in',
            'Vertreter/in?',
          ]),
          'label': 'Verantwortliche Person Selbstdeklaration Baukontrolle',
          'rows': list([
            list([
              dict({
                'label': 'Handelt es sich um eine juristische Person?',
                'slug': 'juristische-person-gesuchstellerin',
                'type': 'TextQuestion',
                'value': 'Ja',
              }),
              dict({
                'label': 'Name juristische Person',
                'slug': 'name-juristische-person-gesuchstellerin',
                'type': 'TextQuestion',
                'value': 'Architekturbüro Asdf',
              }),
              dict({
                'label': 'Name',
                'slug': 'name-gesuchstellerin',
                'type': 'TextQuestion',
                'value': 'Egger',
              }),
              dict({
                'label': 'Vorname',
                'slug': 'vorname-gesuchstellerin',
                'type': 'TextQuestion',
                'value': 'Ernst',
              }),
              dict({
                'label': 'Strasse',
                'slug': 'strasse-gesuchstellerin',
                'type': 'TextQuestion',
                'value': 'Eggistrasse',
              }),
              dict({
                'label': 'Nummer',
                'slug': 'nummer-gesuchstellerin',
                'type': 'TextQuestion',
                'value': None,
              }),
              dict({
                'label': 'PLZ',
                'slug': 'plz-gesuchstellerin',
                'type': 'IntegerQuestion',
                'value': 3456,
              }),
              dict({
                'label': 'Ort',
                'slug': 'ort-gesuchstellerin',
                'type': 'TextQuestion',
                'value': 'Ebersecken',
              }),
              dict({
                'label': 'Telefon oder Mobile',
                'slug': 'telefon-oder-mobile-gesuchstellerin',
                'type': 'TextQuestion',
                'value': '01010101',
              }),
              dict({
                'label': 'E-Mail',
                'slug': 'e-mail-gesuchstellerin',
                'type': 'TextQuestion',
                'value': 'i@e.org',
              }),
            ]),
            list([
              dict({
                'label': 'Handelt es sich um eine juristische Person?',
                'slug': 'juristische-person-gesuchstellerin',
                'type': 'TextQuestion',
                'value': 'Nein',
              }),
              dict({
                'label': 'Name juristische Person',
                'slug': 'name-juristische-person-gesuchstellerin',
                'type': 'TextQuestion',
                'value': None,
              }),
              dict({
                'label': 'Name',
                'slug': 'name-gesuchstellerin',
                'type': 'TextQuestion',
                'value': 'Muster',
              }),
              dict({
                'label': 'Vorname',
                'slug': 'vorname-gesuchstellerin',
                'type': 'TextQuestion',
                'value': 'Max',
              }),
              dict({
                'label': 'Strasse',
                'slug': 'strasse-gesuchstellerin',
                'type': 'TextQuestion',
                'value': 'Wiesenweg',
              }),
              dict({
                'label': 'Nummer',
                'slug': 'nummer-gesuchstellerin',
                'type': 'TextQuestion',
                'value': '33',
              }),
              dict({
                'label': 'PLZ',
                'slug': 'plz-gesuchstellerin',
                'type': 'IntegerQuestion',
                'value': 3007,
              }),
              dict({
                'label': 'Ort',
                'slug': 'ort-gesuchstellerin',
                'type': 'TextQuestion',
                'value': 'Bern',
              }),
              dict({
                'label': 'Telefon oder Mobile',
                'slug': 'telefon-oder-mobile-gesuchstellerin',
                'type': 'TextQuestion',
                'value': '077777777',
              }),
              dict({
                'label': 'E-Mail',
                'slug': 'e-mail-gesuchstellerin',
                'type': 'TextQuestion',
                'value': 'info@example.com',
              }),
            ]),
          ]),
          'slug': 'personalien-sb1-sb2',
          'type': 'TableQuestion',
        }),
        dict({
          'choices': list([
            dict({
              'checked': False,
              'label': 'Ja',
            }),
            dict({
              'checked': False,
              'label': 'Nein',
            }),
          ]),
          'label': 'Ist das Bauvorhaben nach der Baubewilligung und evtl. Projektänderungsbewilligung ausgeführt?',
          'slug': 'bauvorhaben-nach-baubewilligung-ausgefuehrt',
          'type': 'ChoiceQuestion',
        }),
        dict({
          'choices': list([
            dict({
              'checked': False,
              'label': 'Ja',
            }),
            dict({
              'checked': False,
              'label': 'Nein',
            }),
          ]),
          'label': 'Sind die Bedingungen und Auflagen der Baubewilligung eingehalten?',
          'slug': 'bedingungen-auflagen-eingehalten',
          'type': 'ChoiceQuestion',
        }),
        dict({
          'choices': list([
            dict({
              'checked': False,
              'label': 'Ja',
            }),
            dict({
              'checked': False,
              'label': 'Nein',
            }),
          ]),
          'label': 'Sind die Sicherheitsvorschriften eingehalten?',
          'slug': 'sicherheitsvorschriften-eingehalten',
          'type': 'ChoiceQuestion',
        }),
        dict({
          'choices': list([
            dict({
              'checked': False,
              'label': 'Ja',
            }),
            dict({
              'checked': False,
              'label': 'Nein',
            }),
          ]),
          'label': 'Sind die Nebengebäude fertiggestellt?',
          'slug': 'sind-die-nebengebaeude-fertiggestellt',
          'type': 'ChoiceQuestion',
        }),
        dict({
          'choices': list([
            dict({
              'checked': False,
              'label': 'Ja',
            }),
            dict({
              'checked': False,
              'label': 'Nein',
            }),
          ]),
          'label': 'Sind die Umgebungsarbeiten fertiggestellt?',
          'slug': 'sind-die-umgebungsarbeiten-fertiggestellt',
          'type': 'ChoiceQuestion',
        }),
        dict({
          'label': 'Bauende',
          'slug': 'bauende',
          'type': 'DateQuestion',
          'value': None,
        }),
      ]),
      'label': 'Abschluss',
      'slug': 'abschluss-sb2',
      'type': 'FormQuestion',
    }),
    dict({
      'children': list([
        dict({
          'columns': list([
            'Lagerstoff',
            'Neu / Bestehend',
            'Menge',
            'Massangabe',
            'Anlageart',
            'Anzahl Behälter',
            'Lagerort',
            'Brennbare Flüssigkeit / Gas',
            'Flammpunkt',
            'Gesundheitsschädlich oder explosiv',
            'Wassergefährdend',
            'Wassergefährdungsklasse',
            'Bewilligungspflichtig?',
          ]),
          'label': 'Lagerung von Stoffen',
          'rows': list([
          ]),
          'slug': 'lagerung-von-stoffen-v2',
          'type': 'TableQuestion',
        }),
      ]),
      'label': 'Lagerung von Stoffen',
      'slug': 'lagerung-von-stoffen-sb2',
      'type': 'FormQuestion',
    }),
    dict({
      'children': list([
        dict({
          'label': 'Bemerkungen',
          'slug': 'bemerkungen-abschluss-sb2',
          'type': 'TextareaQuestion',
          'value': None,
        }),
        dict({
          'content': None,
          'label': '',
          'slug': 'freigabequittung-sb2-druckansicht',
          'type': 'StaticQuestion',
        }),
      ]),
      'label': 'Freigabequittung',
      'slug': 'freigabequittung-sb2',
      'type': 'FormQuestion',
    }),
    dict({
      'children': list([
        dict({
          'label': 'Verantwortliche Person Selbstdeklaration Baukontrolle',
          'people': list([
            dict({
              'familyName': 'Egger',
              'givenName': 'Ernst',
              'juristicName': 'Architekturbüro Asdf',
            }),
            dict({
              'familyName': 'Muster',
              'givenName': 'Max',
              'juristicName': None,
            }),
          ]),
          'type': 'SignatureQuestion',
        }),
      ]),
      'label': 'Unterschriften',
      'slug': '8-unterschriften',
      'type': 'FormQuestion',
    }),
  ])
# ---
# name: test_document_merge_service_snapshot.6
  dict({
    'addressHeader': 'Wiesenweg, Burgdorf',
    'addressHeaderLabel': 'Adresse',
    'applicantHeader': 'Max Muster',
    'applicantHeaderLabel': 'Gesuchsteller/in',
    'applicants': list([
      dict({
        'address_1': 'Wiesenweg 33',
        'address_2': '3007 Bern',
        'first_name': 'Max',
        'full_address': 'Wiesenweg 33, 3007 Bern',
        'full_name': 'Max Muster',
        'is_juristic_person': False,
        'juristic_name': '',
        'last_name': 'Muster',
        'street': 'Wiesenweg',
        'street_number': '33',
        'town': 'Bern',
        'zip': 3007,
      }),
    ]),
    'authorityHeader': None,
    'authorityHeaderLabel': 'Leitbehörde',
    'caseId': 3,
    'caseType': 'Baugesuch',
    'coordEast': '2614296.0',
    'coordNorth': '1211900.0',
    'createdAt': 'Erstellt am 05.07.2022 um 18:29',
    'descriptionHeader': 'Neubad',
    'descriptionHeaderLabel': 'Beschreibung',
    'dossierNr': '2021-1',
    'formType': 'Materielle Prüfung',
    'generatedAt': 'Generiert am 06.01.2023 um 17:10',
    'inputDateHeader': FakeDatetime(2021, 3, 31, 13, 17, 8, tzinfo=tzutc()),
    'inputDateHeaderLabel': 'Eingangsdatum',
    'landownerHeaderLabel': 'Grundeigentümer/in',
    'landowners': list([
    ]),
    'modificationHeader': None,
    'modificationHeaderLabel': 'Projektänderung',
    'modifiedAt': 'Zuletzt bearbeitet am 05.07.2022 um 18:34',
    'municipality': 'Burgdorf',
    'municipalityHeader': 'Burgdorf',
    'municipalityHeaderLabel': 'Gemeinde',
    'paperInputDateHeader': None,
    'plotsHeader': '3',
    'plotsHeaderLabel': 'Parzelle(n)',
    'projectAuthorHeaderLabel': 'Projektverfasser/in',
    'projectAuthors': list([
    ]),
    'responsibleHeader': None,
    'responsibleHeaderLabel': 'Zuständig',
    'signatureMetadata': 'Ort und Datum',
    'signatureSectionTitle': 'Unterschriften',
    'signatureTitle': 'Unterschrift',
    'tagHeader': None,
    'tagHeaderLabel': 'Stichworte',
    'uploadedAt': 'Hochgeladen am 06.01.2023 um 17:10',
  })
# ---
# name: test_document_merge_service_snapshot.7
  list([
    dict({
      'children': list([
        dict({
          'choices': list([
            dict({
              'checked': True,
              'label': 'Prüfungsgegenstand',
            }),
            dict({
              'checked': False,
              'label': 'Kein Prüfungsgegenstand',
            }),
          ]),
          'label': 'Bepflanzung GBR/EG ZGB',
          'slug': 'mp-bepflanzung',
          'type': 'ChoiceQuestion',
        }),
        dict({
          'choices': list([
            dict({
              'checked': True,
              'label': 'Eingehalten',
            }),
            dict({
              'checked': False,
              'label': 'Mangel',
            }),
            dict({
              'checked': False,
              'label': 'Mangel behoben',
            }),
          ]),
          'label': 'Prüfergebnis',
          'slug': 'mp-bepflanzung-ergebnis',
          'type': 'ChoiceQuestion',
        }),
        dict({
          'label': 'Bemerkungen',
          'slug': 'mp-bepflanzung-bemerkungen',
          'type': 'TextareaQuestion',
          'value': 'Test Bepflanzung',
        }),
      ]),
      'label': 'Weitere Vorschriften',
      'slug': 'mp-weitere-vorschriften',
      'type': 'FormQuestion',
    }),
    dict({
      'children': list([
        dict({
          'choices': list([
            dict({
              'checked': False,
              'label': 'Ja',
            }),
            dict({
              'checked': True,
              'label': 'Nein',
            }),
          ]),
          'label': 'Sind die erforderlichen Beilagen zum Baugesuch vorhanden?',
          'slug': 'mp-erforderliche-beilagen-vorhanden',
          'type': 'ChoiceQuestion',
        }),
        dict({
          'label': 'Welche Beilagen fehlen?',
          'slug': 'mp-welche-beilagen-fehlen',
          'type': 'TextareaQuestion',
          'value': 'Alle',
        }),
      ]),
      'label': 'Abschluss',
      'slug': 'mp-abschluss',
      'type': 'FormQuestion',
    }),
  ])
# ---
# name: test_eingabebestaetigung_gr
  dict({
    'addressHeader': 'Bahnhofstrasse 2, Testhausen',
    'addressHeaderLabel': 'Adresse',
    'applicantHeader': 'Test AG, Foo Bar',
    'applicantHeaderLabel': 'Gesuchsteller/in',
    'applicants': list([
      dict({
        'address_1': '',
        'address_2': '',
        'email': '',
        'first_name': 'Foo',
        'full_address': '',
        'full_name': 'Test AG, Foo Bar',
        'is_juristic_person': True,
        'juristic_name': 'Test AG',
        'last_name': 'Bar',
        'street': '',
        'street_number': '',
        'tel': '',
        'town': '',
        'zip': '',
      }),
    ]),
    'authorityHeader': 'Rebecca Gonzalez',
    'authorityHeaderLabel': 'Leitbehörde',
    'caseId': 1,
    'caseType': 'Baugesuch',
    'coordEast': '',
    'coordNorth': '',
    'createdAt': 'Erstellt am 03.08.2022 um 09:19',
    'descriptionHeader': 'Bau Einfamilienhaus',
    'descriptionHeaderLabel': 'Beschreibung',
    'documents': list([
      dict({
        'checksum': 'sha256:a074d1b5ccf3c28de8ec2ff1355dddb645b7e52301aa3d92850c82176548a5c2',
        'date': '06.09.2022',
        'filename': 'Lageplan.pdf',
        'time': '15:37',
      }),
    ]),
    'dossierNr': None,
    'draft': '',
    'formType': None,
    'generatedAt': 'Generiert am 07.09.2022 um 14:01',
    'inputDateHeader': FakeDatetime(2021, 1, 1, 0, 0),
    'inputDateHeaderLabel': 'Eingangsdatum',
    'landownerHeaderLabel': 'Grundeigentümer/in',
    'landowners': list([
      dict({
        'address_1': '',
        'address_2': '',
        'email': '',
        'first_name': 'Grund',
        'full_address': '',
        'full_name': 'Eigentümer AG, Grund Eigentümerin',
        'is_juristic_person': True,
        'juristic_name': 'Eigentümer AG',
        'last_name': 'Eigentümerin',
        'street': '',
        'street_number': '',
        'tel': '',
        'town': '',
        'zip': '',
      }),
    ]),
    'modificationHeader': 'Projekt Änderung',
    'modificationHeaderLabel': 'Projektänderung',
    'modifiedAt': 'Zuletzt bearbeitet am 06.09.2022 um 15:37',
    'municipality': 'Testhausen',
    'municipalityHeader': 'Testhausen',
    'municipalityHeaderLabel': 'Gemeinde',
    'paperInputDateHeader': FakeDatetime(2021, 1, 2, 0, 0),
    'plotsHeader': '123',
    'plotsHeaderLabel': 'Parzelle(n)',
    'projectAuthorHeaderLabel': 'Projektverfasser/in',
    'projectAuthors': list([
      dict({
        'address_1': '',
        'address_2': '',
        'email': '',
        'first_name': 'Projekt',
        'full_address': '',
        'full_name': 'Projektverfasserin AG, Projekt Verfasserin',
        'is_juristic_person': True,
        'juristic_name': 'Projektverfasserin AG',
        'last_name': 'Verfasserin',
        'street': '',
        'street_number': '',
        'tel': '',
        'town': '',
        'zip': '',
      }),
    ]),
    'responsibleHeader': None,
    'responsibleHeaderLabel': 'Zuständig',
    'sections': list([
      dict({
        'children': list([
        ]),
        'label': 'Unterschriften',
        'slug': '8-unterschriften',
        'type': 'FormQuestion',
      }),
    ]),
    'signatureMetadata': 'Ort und Datum',
    'signatureSectionTitle': 'Unterschriften',
    'signatureTitle': 'Unterschrift',
    'tagHeader': None,
    'tagHeaderLabel': 'Stichworte',
    'uploadedAt': 'Hochgeladen am 07.09.2022 um 14:01',
  })
# ---
